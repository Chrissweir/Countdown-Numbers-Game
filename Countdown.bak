#lang racket

;Define a list called nums which contains the set of numbers that will be chosen at random.
(define nums(list 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 25 50 75 100))

;Define empty list called selected-numbers to hold the 6 random numbers.
(define selected-numbers(list))

;Define a variable called target-number that will store the value of the target number.
(define target-number 0)

;Define custom operators
(define operators'(?+ ?- ?* ?/))

;Define a function (select-numbers) that will take in a list, then get a random value from that list.
;It will then remove that value from the givin list, and then add that value to the list (selected-numbers).
;The function will then check if the list n is equal to 6, meaning there are 6 numbers in the
;list. If this is so then the function will end, if not then it will repeat with the modified
;list as the input.
(define (select-numbers l)
  (define r(list-ref l (random (length l))))
  (set! l(remove r l))
  (set! selected-numbers(cons r selected-numbers))
  (if(= (length selected-numbers) 6)
     selected-numbers
  (select-numbers l)))

;Define a function (get-target-number) that takes in two values (min, max) which will calculate a random
;number between the min and max.
(define (get-target-number min max)
  (set! target-number(+ (random min max) target-number)) target-number)

;Main Function Calculate
(define (calculate x list)
  (for([current-number list])
    (display (current-number)))
  )

(get-target-number 101 1000);Max has to be 1000 in this case for there to be a possibility for 999 to be selected.


(select-numbers nums)
(calculate target-number selected-numbers)

(define (?+ a b)
  (cond
    [(null? a) 0] 
    [(null? b) 0] 
    [(< a b) 0]
    [(zero? a) 0]
    [else (+ a b)]))

(?+ 0 1)